# Managed by Puppet
# Do not modify this file directly, changes will be overwritten!

# Servers/server pool
<% if scope['chrony::pool_address'] -%>
pool <%= scope['chrony::pool_address'] %>
<% else -%>
<% scope['chrony::servers'].each do |server| -%>
server <%= server %>
<% end -%>
<% end -%>

# Driftfile location
driftfile <%= scope['chrony::driftfile'] %>

<% if scope['chrony::client_allow'] -%>
# Set which networks/hosts are allowed to connect to chrony
<% scope['chrony::client_sources'].each do |client_source| -%>
allow <%= client_source %>
<% end -%>
<% end -%>

# Listen for NTP request on a specific address
# Only one bindaddress directive can be specified for IPv4 and one for IPv6
<% if scope['chrony::bindaddress'] -%>
bindaddress <%= scope['chrony::bindaddress'] %>
<% end -%>

# Look here for the admin password needed for chronyc.  The initial
# password is generated by a random process at install time.  You may
# change it if you wish.
keyfile <%= scope['chrony::keyfile'] %>

# This directive forces `chronyd' to send a message to syslog if it
# makes a system clock adjustment larger than a threshold value in seconds.
<% if scope['chrony::logchange'] -%>
logchange <%= scope['chrony::logchange'] %>
<% end -%>

# An example of the use of this directive is
# makestep 0.1 10
# This would step system clock if the adjustment is larger than 0.1 seconds, but only in the first ten clock updates.
<% if scope['chrony::makestep'] -%>
makestep <%= scope['chrony::makestep'] %>
<% end -%>

# This directive enables kernel synchronisation (every 11 minutes) of the
# real-time clock. Note that it can't be used along with the 'rtcfile' directive.
<% if scope['chrony::rtsync'] -%>
rtcsync
<% end -%>

# Comment this line out to turn off logging.
log tracking measurements statistics
<% if scope['chrony::logdir'] -%>
logdir <%= scope['chrony::logdir'] %>
<% end -%>

# Extra options
<% if scope['chrony::extra_options'] -%>
<% scope['chrony::extra_options'].each do |option| -%>
<%= option %>
<% end -%>
<% end -%>